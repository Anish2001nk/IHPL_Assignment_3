# -*- coding: utf-8 -*-
"""server.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rs6mJ7V3Gq5bHXqtvKFYxInf481DVSWk
"""

import socket


# Create a socket object
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Get the local machine name
host = socket.gethostname()

# Reserve a port for your service.
port = 12345

# Bind the socket to a public host, and a port
server_socket.bind((host, port))

# Set the number of clients that the server can listen to
server_socket.listen(3)

# Define a list of cards for the server
server_cards = list(range(1, 14))

# Define a dictionary to keep track of the clients and their scores
clients = {"client1": 0, "client2": 0, "client3": 0}

# Define a function to choose a random card from the server cards and remove it from the list
def choose_server_card():
    card = random.choice(server_cards)
    server_cards.remove(card)
    return card

# Define a function to determine the winner of the round
def determine_winner(cards):
    max_card = max(cards)
    winners = []
    for i, card in enumerate(cards):
        if card == max_card:
            winners.append(i+1)
    return winners

# Define a function to handle a round of the game
def handle_round(client_sockets):
    # Choose a random card from the server cards
    server_card = choose_server_card()
    # Send the server card to all clients
    for client_socket in client_sockets:
        client_socket.send(str(server_card).encode())
    # Receive a card from each client
    cards = []
    for client_socket in client_sockets:
        card = int(client_socket.recv(1024).decode())
        cards.append(card)
    # Determine the winner of the round
    winners = determine_winner(cards)
    # Calculate the points for each winner and add them to their scores
    points = server_card * len(winners)
    for winner in winners:
        client_name = "client" + str(winner)
        clients[client_name] += points
    # Send the result of the round to all clients
    result = {"server_card": server_card, "cards": cards, "winners": winners, "points": points, "scores": clients}
    for client_socket in client_sockets:
        client_socket.send(str(result).encode())

# Accept connections from clients
client_sockets = []
while len(client_sockets) < 3:
    client_socket, addr = server_socket.accept()
    client_sockets.append(client_socket)

# Play 13 rounds of the game
for i in range(13):
    handle_round(client_sockets)

# Determine the winner of the game
max_score = max(clients.values())
winners = []
for client_name, score in clients.items():
    if score == max_score:
        winners.append(client_name)

# Send the result of the game to all clients
result = {"winner": winners, "scores": clients}
for client_socket in client_sockets:
    client_socket.send(str(result).encode())

# Close all connections
for client_socket in client_sockets:
    client_socket.close()
server_socket.close()